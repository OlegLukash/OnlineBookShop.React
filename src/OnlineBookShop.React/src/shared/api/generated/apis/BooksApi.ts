/* tslint:disable */
/* eslint-disable */
/**
 * OnlineBookShop.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BookDto,
    BookDtoFromJSON,
    BookDtoToJSON,
    BookForUpdateDto,
    BookForUpdateDtoFromJSON,
    BookForUpdateDtoToJSON,
    BookGridRowDtoPaginatedResult,
    BookGridRowDtoPaginatedResultFromJSON,
    BookGridRowDtoPaginatedResultToJSON,
    PagedRequest,
    PagedRequestFromJSON,
    PagedRequestToJSON,
} from '../models';

export interface ApiBooksIdDeleteRequest {
    id: number;
}

export interface ApiBooksIdGetRequest {
    id: number;
}

export interface ApiBooksIdPutRequest {
    id: number;
    bookForUpdateDto?: BookForUpdateDto;
}

export interface ApiBooksPaginatedSearchPostRequest {
    pagedRequest?: PagedRequest;
}

export interface ApiBooksPostRequest {
    bookForUpdateDto?: BookForUpdateDto;
}

/**
 * 
 */
export class BooksApi extends runtime.BaseAPI {

    /**
     */
    async apiBooksIdDeleteRaw(requestParameters: ApiBooksIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBooksIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBooksIdDelete(requestParameters: ApiBooksIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiBooksIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBooksIdGetRaw(requestParameters: ApiBooksIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BookDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBooksIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBooksIdGet(requestParameters: ApiBooksIdGetRequest, initOverrides?: RequestInit): Promise<BookDto> {
        const response = await this.apiBooksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBooksIdPutRaw(requestParameters: ApiBooksIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBooksIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookForUpdateDtoToJSON(requestParameters.bookForUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBooksIdPut(requestParameters: ApiBooksIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiBooksIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBooksPaginatedSearchPostRaw(requestParameters: ApiBooksPaginatedSearchPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BookGridRowDtoPaginatedResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Books/PaginatedSearch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagedRequestToJSON(requestParameters.pagedRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookGridRowDtoPaginatedResultFromJSON(jsonValue));
    }

    /**
     */
    async apiBooksPaginatedSearchPost(requestParameters: ApiBooksPaginatedSearchPostRequest, initOverrides?: RequestInit): Promise<BookGridRowDtoPaginatedResult> {
        const response = await this.apiBooksPaginatedSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBooksPostRaw(requestParameters: ApiBooksPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BookDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookForUpdateDtoToJSON(requestParameters.bookForUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiBooksPost(requestParameters: ApiBooksPostRequest, initOverrides?: RequestInit): Promise<BookDto> {
        const response = await this.apiBooksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
